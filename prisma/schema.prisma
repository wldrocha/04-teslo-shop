// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Size {
  XS
  S
  M
  L
  XL
  XXL
  XXXL
}

enum Gender {
  men
  women
  kid
  unisex
}

enum Role {
  user
  admin
}

model Category {
  id      String    @id @default(uuid())
  name    String    @unique
  Product Product[]
}

model Product {
  id           String         @id @default(uuid())
  name         String
  description  String
  inStock      Int
  price        Float          @default(0)
  sizes        Size[]         @default([])
  slug         String         @unique
  tags         String[]       @default([])
  gender       Gender
  category     Category       @relation(fields: [categoryId], references: [id])
  categoryId   String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  ProductImage ProductImage[]
  OrderItem    OrderItem[]

  @@index([gender])
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  url       String
  product   Product @relation(fields: [productId], references: [id])
  productId String
}

model User {
  id            String       @id @default(uuid())
  name          String
  email         String       @unique
  emailVerified DateTime?
  password      String
  role          Role         @default(user)
  image         String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  address       UserAddress?
  Order         Order[]
}

model Country {
  id           String         @id
  name         String
  createdAt    DateTime       @default(now())
  UserAddress  UserAddress[]
  orderAddress orderAddress[]
}

model UserAddress {
  id        String  @id @default(uuid())
  firstName String
  lastName  String
  address   String
  address2  String?
  city      String
  zip       String
  phone     String
  // relations
  country   Country @relation(fields: [countryId], references: [id])
  countryId String
  user      User    @relation(fields: [userId], references: [id])
  userId    String  @unique
}

model Order {
  id           String        @id @default(uuid())
  subTotal     Float
  tax          Float
  total        Float
  itemsInOrder Int
  isPaid       Boolean       @default(false)
  paidAt       DateTime?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt //updated when the order is modified
  // relations
  user         User          @relation(fields: [userId], references: [id])
  userId       String
  OrderItem    OrderItem[]
  orderAddress orderAddress?

  transactionId String?
}

model OrderItem {
  id       String @id @default(uuid())
  quantity Int
  price    Float
  size     Size

  // relations
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId String
}

model orderAddress {
  id        String @id @default(uuid())
  firstName String
  lastName  String
  address   String
  address2  String
  zip       String
  city      String
  phone     String

  // relations
  country   Country @relation(fields: [countryId], references: [id])
  countryId String
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String  @unique
}
